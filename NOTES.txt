

- Command to create a WebApi project : dotnet new webapi -o BookShareApp.API -n BookShareApp.API
- To open vs code inside a folder : cmd to the folder and then use : code .
- Different used extensions to start building the app in vs code :
  - c# Extensions   
  - Nuget package manager 

- dotnet ef 
- dotnet watch run
- npm install -g @angular/cli@6.0.8
- ng new BookingShare-SPA
- Web pack bundle our app and inject the javascript inside our app
- Angular snippet / Angular files / Angular language services / Angular switcher / Angular brackets
  Auto renamae tag / Brackets pair colorizer / debugger for chrome / Materiel icon theme
  path intellisence / Prettier Code formatter / TSLint 

- ng serve
- ng serve --open

- npm install bootstrap font-awesome => Intsalling bootstrap and font-awesome
- git ignore => ignore node modules
- clear => clear the terminal
- .gitignore 
- To set your global username/email configuration:
- Open the command line.
- Set your username: git config --global user.name "Zakaria Boukhris"
- Set your email address: git config --global user.email "boukhriszakaria@gmail.com" 
- dotnet ef migrations add AddUserEnt
- dotnet ef database update
- Register in Startup class : AddTransient (Creating a new instance for each call) / AddScoped (Creating an instance per request)
- ApiController usage => Transform an mvc controller to an Api controller
- The data annotations are added for validation => How does it works ?
- In the Dto we can send the validation annotations => And idea ?
- Validation in the API course => 31 Lecture .
- shutdonw the dotnet watch => Ctrl c
- to debug => make sure the dotnet watch is running => choose .NET core Attach => dotnet .API project
- Enable-Migrations -EnableAutomaticMigrations -Force

_________________________

Angular 

- @Injectable => Make sure that a the thing applied on it can be injected .
- Components are automatically Injectable
- A service should be declared inside the app module providers
- The pipe() function takes as its arguments the functions you want to combine, and returns a new function that, 
when executed, runs the composed functions in sequence.
https://angular.io/guide/rx-library (search for pipes in this URL, you can find the same)
- container mt-5 => margin 5 in with the class container .
- You can add margin using : mr-2
- Check the output properties to send data from the child to parents components 
- Internal server error can cause CORS origin error => To ignore 
- Rethink the api methdos => You can use Fred Way 
- Think about sending different excpetion message in dev mode or in production env => Lecture 49 .
- Creating a general error hanlder is great => In angular the ErrorInterceptor (How does it works) !!
- Review lecture 48 about the different erros returned to the user .
- No exception pages are sent to Angualr => Only on Postman .
- StartUp.cs is the first thing running on a .NET core application .
- Look at launchSettings.Development.json = > Web.config
- Hanlde exceptions globally using ExcpetionHandler
- Seems like 'app.UseCors("AllowAll");' is necessary on the StartUp.cs to allow using cors !! (.NET version ??)
- Best way to hanlde erros on both sides : Angular add error interceptor and on the 
   .net core side try to hanlde erros globally inside the startup to create a suitbale http response to send back 
   to the client . On dev env use the developper exception page but on production cutom the error .

- npm install alertifyjs --save => This used to install something on the angular project
- Angular new utilities : You install what you need and then it's in the node_modules , 
                         after that you can decalre it globally insde angular.json file and styles.class
- npm will bring the thing to you and you have to use it => altertifyJs
- It's good to use a jwt token library on the Angular side , at least : Validate if it's a jwt token , expiry date, extract data etc ..
- npm install @auth0/angular-jwt => auth0 for jwt angular

- the this keyword inside a delegate is misleading => Angular ???
- ngx bootstrap => Bring some functionnality to Angular
- npm install ngx-bootstrap --save => BsDropdownModule
- Colors : Boostwatch

- The order of the routes inside the routes folder is important => Priority order .
- Import RouterModule to be able to use Routes inside Angular .
- Subscribe method => next, error and complete .
- Route guard will prevent people from accessing to pages directly from the browser address bar ! 
- To generate a guard : ng g guard auth --spec=false 
- AuthGuard is like a filter that you run before accessing to a page => Verify authentication
- We can have multiple routes with same route guard => Check routes.ts
- Routes => children && members will be added !!
- Ef core is different => Check docs && code first is cool (The model snapshot)
- services.AddTransient<Seed>(); = > will inject inside the configure method
- Consider Dtos and Automapper => Good way of reimplementing the thing
- Section 9

-Interfaces in Typescript usage is interesting => Check it // TODO
-Optinal properties in typescript should be marked with ? => interface IDo { optionalParam?: any }
-Typescript interface => Compile time checking, intellisence, Auto completion .
-Lecture 84 => Css .
-Absolute positioning => How it works in CSS ?

-blacklistedRoutes: ['localhost:5000/api/auth/'] => Not sending the token to this address (We don't need to)
-Generally forRoot is used to add application/singleton services.
-You can add jwt token to each request going to the server => Check app.module.ts
-Check => this.route.snapshot.params['id']
-Save navigation operators => We could have a component not fully loaded .
-Lecture 88

- RESOLVERS
- Resolvers gives you the ability to retreive the data from the route itself . As an example => MemberDetailResolver .
- With resolvers we don't need anymore safe navigation operators : ? => The data is ready before the page is loaded .
- npm install ngx-gallery@5.3.2 --save
- You can link a button to a diffrent form using form attribute of the button => Lecture 96
- Lecture 97 : CanDeactivate route => Route guard .
    - Host listner can listen to changes coming from the browser => Detecting closing the browser window .

Section 11 : Adding photos upload functionnality

- Photos storage options
  - Blob storage in the database => Less efficient way / Bad choice => Scalability
  - File system : Disk space problems and Scalability
  - Third part provider to store our images .
  - Good choice => https://cloudinary.com/
   - SDK for .NET
   - Authentication system to use their system back and forth / cloudinary => Z@k@ri@1987
- Very nice way to map CloudinarySettings class to it's config section 
  => services.Configure<CloudinarySettings>(Configuration.GetSection("CloudinarySettings"));
- FromForm in the WebApi is necessary to make the action visible on the Api side . => To check .
- ng-2 file upload
- Donet core certification expire : http://www.waynethompson.com.au/blog/dotnet-dev-certs-https/
   - dotnet dev-certs https --clean
   - dotnet dev-certs https -t
- next with observables will tell to the observable to change and to update the value => BehaviorSubject .TODO RxJs .
- Lecture 125 => Reactive form builder .
- npm install @angular/animations@latest --save => Browser animations module
- The good message from the server os not returned .
- [HttpGet("{id}", Name = "GetUser")] => May be this is necessary to return a new route vale as a result 
  of an operation => Final leture of the rigistration modeule .
- Done the reactive forms => Feel free to check the subject more and more .

Section 13 : Action filters

- In .NET core we can get the repo service using from an action filter : 
 => var repo = resultContext.HttpContext.RequestServices.GetService<IBookShareRepository>(); 
- The idea behind the action the action filter is that you can listen to any call of a certain controller or a specific action
 to log some specific behavior . The last active field is a very good example of that .


 Section 14 
 - ?