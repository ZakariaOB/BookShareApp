

- Command to create a WebApi project : dotnet new webapi -o BookShareApp.API -n BookShareApp.API
- To open vs code inside a folder : cmd to the folder and then use : code .
- Different used extensions to start building the app in vs code :
  - c# Extensions   
  - Nuget package manager 

- dotnet ef 
- dotnet watch run
- npm install -g @angular/cli@6.0.8
- ng new BookingShare-SPA
- Web pack bundle our app and inject the javascript inside our app
- Angular snippet / Angular files / Angular language services / ANgular switcher / Angular brackets
  Auto renamae tag / Brackets pair colorizer / debugger for chrome / Materiel icon theme
  path intellisence / Prettier Code formatter / TSLint 

- ng serve
- ng serve --open

- npm install bootstrap font-awesome => Intsalling bootstrap and font-awesome
- git ignore => ignore node modules
- clear => clear the terminal
- .gitignore 
- To set your global username/email configuration:
- Open the command line.
- Set your username: git config --global user.name "Zakaria Boukhris"
- Set your email address: git config --global user.email "boukhriszakaria@gmail.com" 
- dotnet ef migrations add AddUserEnt
- dotnet ef database update
- Register in Startup class : AddTransient (Creating a new instance for each call) / AddScoped (Creating an instance per request)
- ApiController usage => Transform an mvc controller to an Api controller
- The data annotations are added for validation => How does it works ?
- In the Dto we can send the validation annotations => And idea ?
- Validation in the API course => 31 Lecture .
- shutdonw the dotnet watch => Ctrl c
- to debug => make sure the dotnet watch is running => choose .NET core Attach => dotnet .API project
- Enable-Migrations -EnableAutomaticMigrations -Force

_________________________

Angular 

- @Injectable => Make sure that a the thing applied on it can be injected .
- Components are automatically Injectable
- A service should be declared inside the app module providers
- The pipe() function takes as its arguments the functions you want to combine, and returns a new function that, when executed, runs the composed functions in sequence.
https://angular.io/guide/rx-library (search for pipes in this URL, you can find the same)
- container mt-5 => margin 5 in with the class container .
- You can add margin using : mr-2
- Check the output properties to send data from the child to parents components 
- Internal server error can cause CORS origin error => To ignore 
- Rethink the api methdos => You can use Fred Way 
- Think about sending different excpetion message in dev mode or in production env => Lecture 49 .
- Creating a general error hanlder is great => In angular the ErrorInterceptor
- Review lecture 48 about the different erros returned to the user .
- No exception pages are sent to Angualr => Only on Postman .
- StartUp.cs is the first thing running on a .NET core application .
- Look at launchSettings.Development.json = > Web.config
- Hanlde exceptions globally using ExcpetionHandler
- Seems like 'app.UseCors("AllowAll");' is necessary on the StartUp.cs to allow using cors !! (.NET version ??)
- Best way to hanlde erros on both sides : Angular add error interceptor and on the 
   .net core side try to hanlde erros globally inside the startup to create a suitbale http response to send back 
   to the client . On dev env use the developper exception page but on production cutom the error .

- npm install alertifyjs --save => This used to install something on the angular project
- Angular new utilities : You install what you need and then it's in the node_modules , 
                         after that you can decalre it globally insde angular.json file and styles.class
- npm will bring the thing to you and you have to use it => altertifyJs
- It's good to use a jwt token library on the Angular side , at least : Validate if it's a jwt token , expiry date, extract data etc ..
- npm install @auth0/angular-jwt => auth0 for jwt angular

- the this keyword inside a delegate is misleading => Angular
- ngx bootstrap => Bring some functionnality to Angular
- npm install ngx-bootstrap --save => BsDropdownModule
- Colors : Boostwatch

- The order of the routes inside the routes folder is important => Priority order .
- Import RouterModule to be able to use Routes inside Angular .